const defaultOptions={lineWidth:3,strokeStyle:"#000",linecap:"round",timeBetweenLineDraw:200};export class ASP{constructor(t,e={lineWidth:defaultOptions.lineWidth,strokeStyle:defaultOptions.strokeStyle,linecap:defaultOptions.linecap,timeBetweenLineDraw:defaultOptions.timeBetweenLineDraw}){this.canvas=t,this.options=e,this._mouseCoord={x:0,y:0},this.drawer=this.draw.bind(this),this.stoper=this.stop.bind(this),this.paths=[],this._ctx=t.getContext("2d"),this.canvas.addEventListener("mousedown",this.start.bind(this))}initEvent(){this.canvas.addEventListener("mouseup",this.stoper),this.canvas.addEventListener("mouseleave",this.stoper),this.canvas.addEventListener("mousemove",this.drawer)}removeEvent(){this.canvas.removeEventListener("mouseup",this.stoper),this.canvas.removeEventListener("mouseleave",this.stoper),this.canvas.removeEventListener("mousemove",this.drawer)}getCanvas(){return this.canvas}clearCanvas(){this._ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.paths=[]}start(t){this.setMouseCoord(t),this._ctx.beginPath(),this._ctx.lineWidth=this.options.lineWidth?this.options.lineWidth:defaultOptions.lineWidth,this._ctx.lineCap=this.options.linecap?this.options.linecap:defaultOptions.linecap,this._ctx.strokeStyle=this.options.strokeStyle?this.options.strokeStyle:defaultOptions.strokeStyle,this._ctx.moveTo(this._mouseCoord.x,this._mouseCoord.y),this.setMouseCoord(t),this._ctx.lineTo(this._mouseCoord.x,this._mouseCoord.y),this.paths.push({pointPaths:"M"+this._mouseCoord.x+","+this._mouseCoord.y+"L"+this._mouseCoord.x+","+this._mouseCoord.y+" "+(Number(this._mouseCoord.x)+Number(.1))+","+(Number(this._mouseCoord.y)+Number(.1)),start:new Date,end:new Date}),this._ctx.stroke(),this.initEvent()}setMouseCoord(t){this._mouseCoord.x=t.clientX-this.canvas.offsetLeft,this._mouseCoord.y=t.clientY-this.canvas.offsetTop}stop(){this.paths[this.paths.length-1].end=new Date,this.removeEvent()}draw(t){this._ctx.beginPath(),this._ctx.lineWidth=this.options.lineWidth?this.options.lineWidth:defaultOptions.lineWidth,this._ctx.lineCap=this.options.linecap?this.options.linecap:defaultOptions.linecap,this._ctx.strokeStyle=this.options.strokeStyle?this.options.strokeStyle:defaultOptions.strokeStyle,this._ctx.moveTo(this._mouseCoord.x,this._mouseCoord.y),this.setMouseCoord(t),this._ctx.lineTo(this._mouseCoord.x,this._mouseCoord.y),this.paths[this.paths.length-1].pointPaths+=" "+this._mouseCoord.x+","+this._mouseCoord.y,this._ctx.stroke()}getSvg(t=!0){return this.generateSvg(this.canvas,this.options,this.paths,t)}exportData(){return{options:this.options,paths:this.paths}}importData(t){this.options=t.options,this.paths=t.paths,this.paths.forEach(((t,e)=>{"string"==typeof t.start&&(this.paths[e].start=new Date(t.start)),"string"==typeof t.end&&(this.paths[e].end=new Date(t.end))}))}generateSvg(t,e,s,i=!1){const o=document.createElementNS("http://www.w3.org/2000/svg","svg");o.setAttribute("width",t.width.toString()),o.setAttribute("height",t.height.toString());let n=0,h=0;return s.forEach(((t,s)=>{const r=document.createElementNS("http://www.w3.org/2000/svg","path");if(r.setAttribute("id",`p${s}`),r.setAttribute("d",t.pointPaths.toString()),r.setAttribute("stroke",e.strokeStyle?e.strokeStyle.toString():defaultOptions.strokeStyle.toString()),r.setAttribute("stroke-width",e.lineWidth?e.lineWidth.toString():defaultOptions.lineWidth.toString()),r.setAttribute("stroke-linecap",e.linecap?e.linecap.toString():defaultOptions.linecap.toString()),r.setAttribute("fill","none"),i){const i=(r.getTotalLength()+1).toString();r.setAttribute("stroke-dasharray",i),r.setAttribute("stroke-dashoffset",i),h=t.end.getTime()-t.start.getTime();const a=document.createElementNS(o.namespaceURI,"animate");a.setAttribute("attributeName","stroke-dashoffset"),a.setAttribute("begin",n+(e.timeBetweenLineDraw?e.timeBetweenLineDraw:defaultOptions.timeBetweenLineDraw)*s+1+"ms"),a.setAttribute("from",i),a.setAttribute("to","0"),a.setAttribute("dur",h+"ms"),a.setAttribute("calcMode","linear"),a.setAttribute("fill","freeze"),r.appendChild(a),n+=h}o.appendChild(r)})),o}downloadSvg(t="download.svg",e=!0){const s=this.generateSvg(this.canvas,this.options,this.paths,e),i=(new XMLSerializer).serializeToString(s),o=new Blob([i],{type:"image/svg+xml"}),n=window.URL.createObjectURL(o),h=document.createElement("a");h.href=n,h.download=t,h.click()}}